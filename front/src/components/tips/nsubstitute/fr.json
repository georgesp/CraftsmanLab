{
  "nsubstitute": {
    "title": "NSubstitute",
    "shortDescription": "Mocker avec NSubstitute : bases, exemples et bonnes pratiques.",
    "content": {
      "mainTitle": "NSubstitute : framework de mocking pour .NET",
      "intro": "NSubstitute permet de créer facilement des objets mock pour vos tests unitaires avec une syntaxe fluide.",
      "summary": "Framework de mocking simple et expressif, idéal pour isoler les dépendances dans vos tests unitaires.",
      "sections": {
        "installation": {
          "title": "Installation"
        },
        "basics": {
          "title": "Notions de base"
        },
        "labels": {
          "substitution": "Substitution",
          "simpleReturn": "Retour simple",
          "computed": "Valeur calculée",
          "exceptions": "Exceptions",
          "verifyCall": "Vérification d’appel",
          "specialArgs": "Arguments spéciaux",
          "partial": "Partial mock",
          "captureArgs": "Capturer les arguments"
        },
        "basicMocking": {
          "title": "Mocking de base",
          "subtitle": "Créer un substitute simple"
        },
        "configuration": {
          "title": "Configuration des retours",
          "subtitle": "Returns et exceptions"
        },
        "verification": {
          "title": "Vérification des appels",
          "subtitle": "Received et DidNotReceive"
        },
        "arguments": {
          "title": "Matching d'arguments",
          "subtitle": "Arg.Any, Arg.Is et patterns"
        },
        "properties": {
          "title": "Propriétés et événements"
        },
        "bestPractices": {
          "title": "Bonnes pratiques",
          "tips": [
            "Mockez seulement les dépendances externes",
            "Préférez les interfaces aux classes concrètes",
            "Configurez le minimum nécessaire",
            "Vérifiez les interactions importantes",
            "Évitez de mocker ce que vous possédez"
          ]
        },
        "exampleFull": {
          "title": "Exemple complet",
          "codeToTest": "Le code à tester",
          "testWith": "Le test avec NSubstitute"
        },
        "notes": {
          "title": "Remarques",
          "points": [
            "<code>calc.Add(2,3).Returns(5)</code> force la valeur de retour uniquement pour ces arguments.",
            "Si vous ne précisez pas de retour explicite, le mock renverra la valeur par défaut du type (<code>0</code> pour <code>int</code>, <code>null</code> pour les références, etc.)."
          ]
        },
        "additional": {
          "title": "Cas pratiques supplémentaires",
          "asyncMethod": "Mock d’une méthode asynchrone",
          "exceptionMethod": "Mock d’une méthode qui lance une exception",
          "verifyCount": "Vérifier le nombre d’appels",
          "verifyCountCode": "// Au moins deux appels\ncalc.Received(2).Log(Arg.Any<string>());\n\n// Aucun appel\ncalc.DidNotReceive().Add(Arg.Any<int>(), Arg.Any<int>());",
          "captureArg": "Utiliser When pour capturer l’argument passé"
        },
        "goodPractices": {
          "title": "Bonnes pratiques",
          "items": {
            "explicitNames": {
              "title": "Noms explicites",
              "desc": "exemple lisible comme un pseudo‑code :"
            },
            "avoidUselessMocks": {
              "title": "Évite les mocks inutiles",
              "desc": "si vous n’interagissez pas avec l’objet, ne le mockez pas."
            },
            "usePartialMock": {
              "title": "Utilise Substitute.ForPartsOf<T>()",
              "desc": "pour tester une classe concrète partiellement — vous gardez la logique interne et vous ne stubb ez que le nécessaire."
            },
            "neverHideBug": {
              "title": "Ne cache jamais un bug",
              "desc": "si vous stubbez tout, un test peut passer même si le code est incorrect."
            }
          }
        }
      }
      ,
      "footer": {
        "sourceLabel": "Source : NSubstitute (GitHub)",
        "writtenOn": "Écrit le {{date}}"
      }
    }
  }
}
